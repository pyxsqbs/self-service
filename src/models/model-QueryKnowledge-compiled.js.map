{"version":3,"sources":["model-QueryKnowledge.js"],"names":[],"mappings":"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","file":"model-QueryKnowledge-compiled.js","sourcesContent":["import {postClassification, postGeogId, queryKnowledgeData} from '../services/service-QueryKnowledge'\n\nexport default {\n  namespace: 'modelQueryKnowledge',\n  state: {\n    classification: [],\n    geogId: '',\n    queryKnowledgeTableData: [],\n    totalProperty: 0,\n  },\n  reducers: {\n    initClassification(state, {payload}) {\n      Object.assign(state.classification, payload);\n      return Object.assign({}, state);\n    },\n    initGeogId(state, {payload}) {\n      state.geogId = payload;\n      return Object.assign({}, state);\n    },\n    initQueryKnowledgeData(state, {payload}) {\n      state.queryKnowledgeTableData = payload;\n      return Object.assign({}, state);\n    },\n    initTotal(state, {payload}) {\n      Object.assign(state, {\n        totalProperty: payload,\n      });\n      return Object.assign({}, state);\n    },\n    INIT(state, {payload}) {\n      return Object.assign({}, {\n        classification: [],\n        geogId: '',\n        queryKnowledgeTableData: [],\n        totalProperty: 0,\n      });\n    },\n  },\n  effects: {\n    * loadClassification({payload}, {call, put, select}) {\n      const result = yield call(postClassification);\n      if (JSON.stringify(result).indexOf('\"err\":') === -1 && JSON.stringify(result).indexOf('\"error\":') === -1) {\n        yield put({type: 'initClassification', payload: result.data});\n      }\n    },\n    * loadGeogId({payload}, {call, put, select}) {\n      const result = yield call(postGeogId);\n      if (JSON.stringify(result).indexOf('\"err\":') === -1 && JSON.stringify(result).indexOf('\"error\":') === -1) {\n        yield put({type: 'initGeogId', payload: result.data.data.geogid});\n      }\n    },\n    * getQueryKnowledgeTableData({payload}, {call, put, select}) {\n      const result = yield call(queryKnowledgeData, payload);\n      if (JSON.stringify(result).indexOf('\"err\":') === -1 && JSON.stringify(result).indexOf('\"error\":') === -1) {\n        yield put({type: 'initQueryKnowledgeData', payload: result.data.root});\n        yield put({type: 'initTotal', payload: result.data.totalProperty});\n      }\n    },\n  },\n  subscriptions: {},\n};\n"]}